// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var CurrentlyPlaying$ReactTemplate = require("./CurrentlyPlaying.bs.js");

var ppx_printed_query = "query findUsername  {\nspotify  {\nme  {\nid  \nplayer  {\nisPlaying  \ncurrentlyPlayingType  \nitem  {\nid  \nname  \nartists  {\nname  \n}\n\ndurationMs  \nhref  \nalbum  {\nimages  {\nurl  \n}\n\n}\n\n}\n\nprogressMs  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "spotify");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "me");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$1 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeNull(value$1);
          if (match$4 !== undefined) {
            tmp$1 = undefined;
          } else {
            var match$5 = Js_json.decodeObject(value$1);
            var tmp$2;
            if (match$5 !== undefined) {
              var value$2 = Caml_option.valFromOption(match$5);
              var match$6 = Js_dict.get(value$2, "id");
              var tmp$3;
              if (match$6 !== undefined) {
                var value$3 = Caml_option.valFromOption(match$6);
                var match$7 = Js_json.decodeNull(value$3);
                if (match$7 !== undefined) {
                  tmp$3 = undefined;
                } else {
                  var match$8 = Js_json.decodeString(value$3);
                  tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                }
              } else {
                tmp$3 = undefined;
              }
              var match$9 = Js_dict.get(value$2, "player");
              var tmp$4;
              if (match$9 !== undefined) {
                var value$4 = Caml_option.valFromOption(match$9);
                var match$10 = Js_json.decodeNull(value$4);
                if (match$10 !== undefined) {
                  tmp$4 = undefined;
                } else {
                  var match$11 = Js_json.decodeObject(value$4);
                  var tmp$5;
                  if (match$11 !== undefined) {
                    var value$5 = Caml_option.valFromOption(match$11);
                    var match$12 = Js_dict.get(value$5, "isPlaying");
                    var tmp$6;
                    if (match$12 !== undefined) {
                      var value$6 = Caml_option.valFromOption(match$12);
                      var match$13 = Js_json.decodeNull(value$6);
                      if (match$13 !== undefined) {
                        tmp$6 = undefined;
                      } else {
                        var match$14 = Js_json.decodeBoolean(value$6);
                        tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$6));
                      }
                    } else {
                      tmp$6 = undefined;
                    }
                    var match$15 = Js_dict.get(value$5, "currentlyPlayingType");
                    var tmp$7;
                    if (match$15 !== undefined) {
                      var value$7 = Caml_option.valFromOption(match$15);
                      var match$16 = Js_json.decodeNull(value$7);
                      if (match$16 !== undefined) {
                        tmp$7 = undefined;
                      } else {
                        var match$17 = Js_json.decodeString(value$7);
                        tmp$7 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                      }
                    } else {
                      tmp$7 = undefined;
                    }
                    var match$18 = Js_dict.get(value$5, "item");
                    var tmp$8;
                    if (match$18 !== undefined) {
                      var value$8 = Caml_option.valFromOption(match$18);
                      var match$19 = Js_json.decodeNull(value$8);
                      if (match$19 !== undefined) {
                        tmp$8 = undefined;
                      } else {
                        var match$20 = Js_json.decodeObject(value$8);
                        var tmp$9;
                        if (match$20 !== undefined) {
                          var value$9 = Caml_option.valFromOption(match$20);
                          var match$21 = Js_dict.get(value$9, "id");
                          var tmp$10;
                          if (match$21 !== undefined) {
                            var value$10 = Caml_option.valFromOption(match$21);
                            var match$22 = Js_json.decodeNull(value$10);
                            if (match$22 !== undefined) {
                              tmp$10 = undefined;
                            } else {
                              var match$23 = Js_json.decodeString(value$10);
                              tmp$10 = match$23 !== undefined ? match$23 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                            }
                          } else {
                            tmp$10 = undefined;
                          }
                          var match$24 = Js_dict.get(value$9, "name");
                          var tmp$11;
                          if (match$24 !== undefined) {
                            var value$11 = Caml_option.valFromOption(match$24);
                            var match$25 = Js_json.decodeNull(value$11);
                            if (match$25 !== undefined) {
                              tmp$11 = undefined;
                            } else {
                              var match$26 = Js_json.decodeString(value$11);
                              tmp$11 = match$26 !== undefined ? match$26 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
                            }
                          } else {
                            tmp$11 = undefined;
                          }
                          var match$27 = Js_dict.get(value$9, "artists");
                          var tmp$12;
                          if (match$27 !== undefined) {
                            var value$12 = Caml_option.valFromOption(match$27);
                            var match$28 = Js_json.decodeNull(value$12);
                            if (match$28 !== undefined) {
                              tmp$12 = undefined;
                            } else {
                              var match$29 = Js_json.decodeArray(value$12);
                              tmp$12 = match$29 !== undefined ? match$29.map((function (value) {
                                        var match = Js_json.decodeObject(value);
                                        if (match !== undefined) {
                                          var match$1 = Js_dict.get(Caml_option.valFromOption(match), "name");
                                          var tmp;
                                          if (match$1 !== undefined) {
                                            var value$1 = Caml_option.valFromOption(match$1);
                                            var match$2 = Js_json.decodeNull(value$1);
                                            if (match$2 !== undefined) {
                                              tmp = undefined;
                                            } else {
                                              var match$3 = Js_json.decodeString(value$1);
                                              tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
                                            }
                                          } else {
                                            tmp = undefined;
                                          }
                                          return {
                                                  name: tmp
                                                };
                                        } else {
                                          return Js_exn.raiseError("graphql_ppx: Object is not a value");
                                        }
                                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$12));
                            }
                          } else {
                            tmp$12 = undefined;
                          }
                          var match$30 = Js_dict.get(value$9, "durationMs");
                          var tmp$13;
                          if (match$30 !== undefined) {
                            var value$13 = Caml_option.valFromOption(match$30);
                            var match$31 = Js_json.decodeNull(value$13);
                            if (match$31 !== undefined) {
                              tmp$13 = undefined;
                            } else {
                              var match$32 = Js_json.decodeNumber(value$13);
                              tmp$13 = match$32 !== undefined ? match$32 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$13));
                            }
                          } else {
                            tmp$13 = undefined;
                          }
                          var match$33 = Js_dict.get(value$9, "href");
                          var tmp$14;
                          if (match$33 !== undefined) {
                            var value$14 = Caml_option.valFromOption(match$33);
                            var match$34 = Js_json.decodeNull(value$14);
                            if (match$34 !== undefined) {
                              tmp$14 = undefined;
                            } else {
                              var match$35 = Js_json.decodeString(value$14);
                              tmp$14 = match$35 !== undefined ? match$35 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
                            }
                          } else {
                            tmp$14 = undefined;
                          }
                          var match$36 = Js_dict.get(value$9, "album");
                          var tmp$15;
                          if (match$36 !== undefined) {
                            var value$15 = Caml_option.valFromOption(match$36);
                            var match$37 = Js_json.decodeNull(value$15);
                            if (match$37 !== undefined) {
                              tmp$15 = undefined;
                            } else {
                              var match$38 = Js_json.decodeObject(value$15);
                              var tmp$16;
                              if (match$38 !== undefined) {
                                var match$39 = Js_dict.get(Caml_option.valFromOption(match$38), "images");
                                var tmp$17;
                                if (match$39 !== undefined) {
                                  var value$16 = Caml_option.valFromOption(match$39);
                                  var match$40 = Js_json.decodeNull(value$16);
                                  if (match$40 !== undefined) {
                                    tmp$17 = undefined;
                                  } else {
                                    var match$41 = Js_json.decodeArray(value$16);
                                    tmp$17 = match$41 !== undefined ? match$41.map((function (value) {
                                              var match = Js_json.decodeObject(value);
                                              if (match !== undefined) {
                                                var match$1 = Js_dict.get(Caml_option.valFromOption(match), "url");
                                                var tmp;
                                                if (match$1 !== undefined) {
                                                  var value$1 = Caml_option.valFromOption(match$1);
                                                  var match$2 = Js_json.decodeNull(value$1);
                                                  if (match$2 !== undefined) {
                                                    tmp = undefined;
                                                  } else {
                                                    var match$3 = Js_json.decodeString(value$1);
                                                    tmp = match$3 !== undefined ? match$3 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$1));
                                                  }
                                                } else {
                                                  tmp = undefined;
                                                }
                                                return {
                                                        url: tmp
                                                      };
                                              } else {
                                                return Js_exn.raiseError("graphql_ppx: Object is not a value");
                                              }
                                            })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$16));
                                  }
                                } else {
                                  tmp$17 = undefined;
                                }
                                tmp$16 = {
                                  images: tmp$17
                                };
                              } else {
                                tmp$16 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                              tmp$15 = Caml_option.some(tmp$16);
                            }
                          } else {
                            tmp$15 = undefined;
                          }
                          tmp$9 = {
                            id: tmp$10,
                            name: tmp$11,
                            artists: tmp$12,
                            durationMs: tmp$13,
                            href: tmp$14,
                            album: tmp$15
                          };
                        } else {
                          tmp$9 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                        }
                        tmp$8 = Caml_option.some(tmp$9);
                      }
                    } else {
                      tmp$8 = undefined;
                    }
                    var match$42 = Js_dict.get(value$5, "progressMs");
                    var tmp$18;
                    if (match$42 !== undefined) {
                      var value$17 = Caml_option.valFromOption(match$42);
                      var match$43 = Js_json.decodeNull(value$17);
                      if (match$43 !== undefined) {
                        tmp$18 = undefined;
                      } else {
                        var match$44 = Js_json.decodeNumber(value$17);
                        tmp$18 = match$44 !== undefined ? match$44 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$17));
                      }
                    } else {
                      tmp$18 = undefined;
                    }
                    tmp$5 = {
                      isPlaying: tmp$6,
                      currentlyPlayingType: tmp$7,
                      item: tmp$8,
                      progressMs: tmp$18
                    };
                  } else {
                    tmp$5 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                  }
                  tmp$4 = Caml_option.some(tmp$5);
                }
              } else {
                tmp$4 = undefined;
              }
              tmp$2 = {
                id: tmp$3,
                player: tmp$4
              };
            } else {
              tmp$2 = Js_exn.raiseError("graphql_ppx: Object is not a value");
            }
            tmp$1 = Caml_option.some(tmp$2);
          }
        } else {
          tmp$1 = undefined;
        }
        tmp = {
          me: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field spotify on type Query is missing");
    }
    return {
            spotify: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables(param) {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetCurrentlyPlaying = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetCurrentlyPlayingQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.statelessComponent("GetCurrentlyPlaying");

function make$1(_children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return ReasonReact.element(undefined, undefined, Curry.app(GetCurrentlyPlayingQuery[/* make */3], [
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, "Loading");
                                  } else if (result.tag) {
                                    var response = result[0];
                                    var spotifyIsLaunched = Belt_Option.flatMap(Belt_Option.flatMap(response.spotify.me, (function (me) {
                                                return me.player;
                                              })), (function (player) {
                                            return player.item;
                                          }));
                                    if (spotifyIsLaunched !== undefined) {
                                      var isPlaying = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(response.spotify.me, (function (me) {
                                                      return me.player;
                                                    })), (function (player) {
                                                  return player.isPlaying;
                                                })), false);
                                      var durationMs = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(response.spotify.me, (function (me) {
                                                          return me.player;
                                                        })), (function (player) {
                                                      return player.item;
                                                    })), (function (item) {
                                                  return item.durationMs;
                                                })), 0);
                                      var progressMs = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(response.spotify.me, (function (me) {
                                                      return me.player;
                                                    })), (function (player) {
                                                  return player.progressMs;
                                                })), 0);
                                      var imageArray = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(response.spotify.me, (function (me) {
                                                              return me.player;
                                                            })), (function (player) {
                                                          return player.item;
                                                        })), (function (item) {
                                                      return item.album;
                                                    })), (function (album) {
                                                  return album.images;
                                                })), /* array */[]);
                                      var imageUrlArray = imageArray.map((function (image) {
                                                var match = image.url;
                                                if (match !== undefined) {
                                                  return match;
                                                } else {
                                                  return "";
                                                }
                                              })).filter((function (name) {
                                              return name !== "";
                                            }));
                                      var songName = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(response.spotify.me, (function (me) {
                                                          return me.player;
                                                        })), (function (player) {
                                                      return player.item;
                                                    })), (function (item) {
                                                  return item.name;
                                                })), "");
                                      var artistArray = Belt_Option.getWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(response.spotify.me, (function (me) {
                                                          return me.player;
                                                        })), (function (player) {
                                                      return player.item;
                                                    })), (function (item) {
                                                  return item.artists;
                                                })), /* array */[]);
                                      var artistNameArray = artistArray.map((function (artist) {
                                                var match = artist.name;
                                                if (match !== undefined) {
                                                  return match;
                                                } else {
                                                  return "";
                                                }
                                              })).filter((function (name) {
                                              return name !== "";
                                            }));
                                      var artistName = artistNameArray.join(",");
                                      var match = imageUrlArray.length > 1;
                                      var tmp;
                                      if (match) {
                                        tmp = Caml_array.caml_array_get(imageUrlArray, 1);
                                      } else {
                                        var match$1 = imageUrlArray.length === 1;
                                        tmp = match$1 ? Caml_array.caml_array_get(imageUrlArray, 0) : "";
                                      }
                                      return ReasonReact.element(undefined, undefined, CurrentlyPlaying$ReactTemplate.make(songName, artistName, isPlaying, progressMs / durationMs * 100, tmp, /* array */[]));
                                    } else {
                                      return "Nobody is listening to Spotify on this account right now.";
                                    }
                                  } else {
                                    return React.createElement("div", undefined, result[0].message);
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.GetCurrentlyPlaying = GetCurrentlyPlaying;
exports.GetCurrentlyPlayingQuery = GetCurrentlyPlayingQuery;
exports.component = component;
exports.make = make$1;
/* GetCurrentlyPlayingQuery Not a pure module */
